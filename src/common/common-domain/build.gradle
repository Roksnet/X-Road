plugins {
    id("xroad.java-conventions")
}

configurations {
    xjc
}

project.ext.schemaTargetDir = layout.buildDirectory.dir("generated-sources").get().asFile

sourceSets {
    main {
        java.srcDirs = ['src/main/java', schemaTargetDir]
    }
}

dependencies {
    api project(":common:common-core")

    testImplementation project(':common:common-message')
    testImplementation project(':common:common-test')

    xjc libs.bundles.jaxb
}

tasks.register('xjc') {
    inputs.files fileTree(dir: 'src/main/resources', include: '*.xsd')
    outputs.dir schemaTargetDir

    doLast {
        ant.taskdef(name: 'xjc',
            classname: 'com.sun.tools.xjc.XJCTask',
            classpath: configurations.xjc.asPath)

        // Generate classes for identifiers
        ant.xjc(
            destdir: project.ext.schemaTargetDir,
            package: 'ee.ria.xroad.common.identifier',
            schema: 'src/main/resources/identifiers.xsd'
        )

        // Generate classes for message, using identifier classes
        ant.xjc(
            destdir: project.ext.schemaTargetDir,
            package: 'ee.ria.xroad.common.message',
            schema: 'src/main/resources/message.xsd',
            binding: 'src/main/resources/identifiers-bindings.xml'
        )

        // Generate classes for request, using identifier classes
        ant.xjc(
            destdir: project.ext.schemaTargetDir,
            package: 'ee.ria.xroad.common.request',
            schema: 'src/main/resources/request.xsd',
            binding: 'src/main/resources/identifiers-bindings.xml'
        )

        // Generate classes for service metainfo
        ant.xjc(
            destdir: project.ext.schemaTargetDir,
            package: 'ee.ria.xroad.common.metadata',
            schema: 'src/main/resources/service-metainfo.xsd',
            binding: 'src/main/resources/identifiers-bindings.xml'
        )
    }
}

compileJava.dependsOn xjc
